// https://it.forum.grepolis.com/index.php?threads/script-greposentinelbutton-greposentinelindicator.24135/
// Adds a green shield see to polis with sentinels, 100% client side


class SentinelIndicator extends window.Tool {
    constructor() {
        super();
        this.active = [];
        this.observer = null;
        this.enabled = false;
        this.containerId = 'map_sentinel';
        this._updateMap = this.updateMap.bind(this);
        console.log('[GrepoTweaks-SentinelIndicator] initialized');
    }

    enable() {
        if (this.enabled) return;
        this.enabled = true;

        // Wait for map to exist, then setup
        this.waitFor(() => document.getElementById('map_move_container') && document.getElementById('map_islands'))
            .then(() => {
                this.setupContainer();
                this.attachObserver();
                this.updateMap();
                console.log('[GrepoTweaks-SentinelIndicator] enabled');
            })
            .catch(() => {
                console.warn('[GrepoTweaks-SentinelIndicator] map not found; disabling');
                this.enabled = false;
            });
    }

    destroy() {
        // Detach observer
        if (this.observer) {
            this.observer.disconnect();
            this.observer = null;
        }
        // Remove shields
        this.active.forEach(id => this.removeGreenShield(id));
        this.active = [];

        // Remove container
        const c = document.getElementById(this.containerId);
        if (c && c.parentNode) c.parentNode.removeChild(c);

        this.enabled = false;
        console.log('[GrepoTweaks-SentinelIndicator] destroyed');
    }

    settings() {
        return '' +
            '<div class="section">' +
            '  <div class="game_header bold">Sentinel Indicator</div>' +
            '  <div class="group">' +
            '    <p>Mostra uno scudo verde sulle polis che ospitano Sentinelle (solo client-side).</p>' +
            '    <div class="button_new js-si-refresh" style="margin-top:10px;">' +
            '      <div class="left"></div><div class="right"></div>' +
            '      <div class="caption js-caption"><span>Aggiorna ora</span><div class="effect js-effect"></div></div>' +
            '    </div>' +
            '  </div>' +
            '</div>';
    }

    // --- internals ---

    waitFor(testFn, timeoutMs = 8000, intervalMs = 100) {
        return new Promise((resolve, reject) => {
            const start = Date.now();
            const i = setInterval(() => {
                if (testFn()) { clearInterval(i); resolve(); }
                else if (Date.now() - start > timeoutMs) { clearInterval(i); reject(new Error('timeout')); }
            }, intervalMs);
        });
    }

    setupContainer() {
        if (document.getElementById(this.containerId)) return;
        const container = document.getElementById('map_move_container');
        const div = document.createElement('div');
        div.id = this.containerId;
        Object.assign(div.style, {
            position: 'absolute',
            top: '0px',
            left: '0px',
            zIndex: '5',
            pointerEvents: 'none',
            opacity: '0.6'
        });
        container.appendChild(div);
    }

    attachObserver() {
        const targetNode = document.getElementById('map_islands');
        if (!targetNode) return;

        const opts = { childList: true, attributes: true, subtree: true };
        this.observer = new MutationObserver(this._updateMap);
        this.observer.observe(targetNode, opts);
    }

    addGreenShield(polisId) {
        const polis = document.getElementById(`town_${polisId}`);
        if (!polis) return false;

        const x = parseInt(polis.style.left, 10);
        const y = parseInt(polis.style.top, 10);

        const shield = document.createElement('div');
        shield.id = `sentinel_shield_${polisId}`;
        Object.assign(shield.style, {
            left: `${x - 29}px`,
            top: `${y - 25}px`,
            background: 'url(https://gpit.innogamescdn.com/images/game/autogenerated/map/town_overlay/city_shield_cd2b0df.png) no-repeat 0 0',
            width: '110px',
            height: '72px',
            position: 'absolute',
            transform: 'translate(10px,10px)',
            backgroundSize: '95%',
            filter: 'grayscale(100%) brightness(80%) sepia(300%) hue-rotate(50deg) saturate(500%)'
        });

        const map = document.getElementById(this.containerId);
        if (!map) return false;
        map.appendChild(shield);
        return true;
    }

    removeGreenShield(polisId) {
        const el = document.getElementById(`sentinel_shield_${polisId}`);
        if (!el) return false;
        el.remove();
        return true;
    }

    updateMap() {
        if (!this.enabled) return;

        try {
            const towns = Object.keys(window.ITowns.towns || {});
            const current = [];

            towns.forEach((tid) => {
                const frag = window.ITowns.all_supporting_units?.fragments?.[tid];
                const models = frag?.models || [];
                models.forEach(m => {
                    const id = m?.attributes?.current_town_id;
                    if (id != null && current.indexOf(id) === -1) current.push(id);
                });
            });

            // diff
            const toRemove = this.active.filter(x => !current.includes(x));
            const toAdd = current.filter(x => !this.active.includes(x));

            toRemove.forEach(id => this.removeGreenShield(id));
            toAdd.forEach(id => { if (!this.addGreenShield(id)) current.splice(current.indexOf(id), 1); });

            this.active = current;
        } catch (e) {
            // Fail softly; try again on the next mutation
            // console.debug('updateMap error', e);
        }
    }
}

// Expose the tool instance (like the example)
window.modernSentinelIndicator = new SentinelIndicator();

