
const css = `
a.button.disabled .middle { background-position: -14px -184px; }
a.button.disabled .left   { background-position: left -115px; }
a.button.disabled .right  { background-position: right -46px; }
`;
$('<style>').html(css).appendTo('head');


function ajaxAction(action_name, town_id, farm_town_id, relation_id, extraArgs = {}) {
    const data = {
        model_url: `FarmTownPlayerRelation/${relation_id}`,
        action_name,
        arguments: { farm_town_id, ...extraArgs },
        town_id
    };
    uw.gpAjax.ajaxPost('frontend_bridge', 'execute', data);
}
function unlockRural(town_id, farm_town_id, relation_id) {
    ajaxAction('unlock', town_id, farm_town_id, relation_id);
}
function upgradeRural(town_id, farm_town_id, relation_id) {
    ajaxAction('upgrade', town_id, farm_town_id, relation_id);
}
function tradeRural(town_id, farm_town_id, relation_id, amount) {
    if (amount < 100) return;                 // game minimum
    ajaxAction('trade', town_id, farm_town_id, relation_id, { amount: Math.min(3000, amount) });
}

// --- Core: add buttons to one farm_town element ---
function addButtons() {
    // Derive farm town id from the element's class (farm_town_el_<id>)
    const classAttr = $(this).attr('class') || '';
    const match = classAttr.match(/farm_town_el_([0-9]+)/);
    if (!match) return;
    const id = match[1];

    // Pull models once per call (collections are cached by MM)
    const player_relation_models = uw.MM.getOnlyCollectionByName('FarmTownPlayerRelation').models;
    const farm_town_models = uw.MM.getOnlyCollectionByName('FarmTown').models;

    const player_relation = player_relation_models.find(m => m.attributes.farm_town_id == id);
    const farm_town = farm_town_models.find(m => m.attributes.id == id);
    if (!player_relation || !farm_town) return;

    // Build UI buttons
    const $trade = $('<a>', {
        class: 'button quick-rurals-trade',
        href: '#',
        css: { position: 'absolute', top: '3px', right: '3px' }
    }).append(
        $('<span>', { class: 'left' }).append(
            $('<span>', { class: 'right' }).append(
                $('<span>', { class: 'middle mid', css: { minWidth: '26px' } }).append(
                    $('<span>', {
                        class: 'img_trade',
                        css: {
                            width: '27px',
                            height: '27px',
                            top: '-3px',
                            float: 'left',
                            position: 'relative',
                            background: 'url("https://flasktools.altervista.org/images/cjq6d72qk521ig1zz.png") no-repeat'
                        }
                    })
                )
            )
        )
    );

    const $upgrade = $('<a>', {
        class: 'button quick-rurals-upgrade',
        href: '#',
        css: { position: 'absolute', top: '3px', right: '47px' }
    }).append(
        $('<span>', { class: 'left' }).append(
            $('<span>', { class: 'right' }).append(
                $('<span>', { class: 'middle mid', css: { minWidth: '26px' } }).append(
                    $('<span>', {
                        class: 'img_trade',
                        css: {
                            width: '27px',
                            height: '27px',
                            top: '-3px',
                            float: 'left',
                            position: 'relative',
                            background: 'url("https://gpit.innogamescdn.com/images/game/autogenerated/battle_point_villages/battle_point_villages_e6b65fc.png") no-repeat -895px -313px'
                        }
                    })
                )
            )
        )
    );

    // Avoid duplicate buttons if re-run
    const $host = $(this);
    $host.find('a.quick-rurals-trade, a.quick-rurals-upgrade').remove();
    $host.append($trade, $upgrade);

    // Handlers
    function handleUpgrade(e) {
        e.preventDefault();
        const town = uw.ITowns.getCurrentTown();
        if (!town) return;

        if (player_relation.attributes.relation_status === 0) {
            // Not unlocked yet
            unlockRural(town.id, id, player_relation.id);
            return;
        }

        // Upgrade and disable the button
        upgradeRural(town.id, id, player_relation.id);
        $upgrade.addClass('disabled').off('click', handleUpgrade);
    }

    function handleTrade(e) {
        e.preventDefault();
        const town = uw.ITowns.getCurrentTown();
        if (!town) return;

        const resources = town.resources();
        const capacity = town.getAvailableTradeCapacity();
        const resource = farm_town.attributes.resource_demand; // wood|stone|iron
        const available = resources[resource] || 0;

        const count = Math.min(capacity, available);
        tradeRural(town.id, id, player_relation.id, count);
    }

    // Enable/disable Upgrade
    if (player_relation.attributes.expansion_at !== null) {
        // Currently expanding
        $upgrade.addClass('disabled');
    } else {
        $upgrade.on('click', handleUpgrade);
    }

    // Enable/disable Trade
    const town = uw.ITowns.getCurrentTown();
    const killpoints = uw.MM.getModelByNameAndPlayerId('PlayerKillpoints').attributes;
    const kpAvailable = (killpoints.att + killpoints.def - killpoints.used) || 0;

    if (!town || town.getAvailableTradeCapacity() < 100 ||
        kpAvailable < player_relation.attributes.upgrade_cost) {
        $trade.addClass('disabled');
    } else {
        $trade.on('click', handleTrade);
    }
}

// --- Wire on island window open ---
$.Observer(GameEvents.window.open).subscribe('quick_rurals', (event, payload) => {
    if (!payload || payload.context !== 'island') return;
    const { wnd } = payload;

    // Poll until farm town elements are present within this window
    const interval = setInterval(() => {
        const $els = $(`#gpwnd_${wnd.getID()} [class*='farm_town_el_']`);
        if (!$els.length) return;

        clearInterval(interval);
        $els.each(addButtons);
    }, 50);
});


